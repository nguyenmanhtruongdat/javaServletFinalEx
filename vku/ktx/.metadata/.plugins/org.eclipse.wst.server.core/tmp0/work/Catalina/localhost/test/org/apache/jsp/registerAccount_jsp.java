/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.55
 * Generated at: 2022-07-07 18:36:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class registerAccount_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>Register</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/style.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/bootstrap.min.css\">\r\n");
      out.write("<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\"\r\n");
      out.write("	href=\"favicons/favicon-16x16.png\">\r\n");
      out.write("<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\"\r\n");
      out.write("	href=\"favicons/favicon-32x32.png\">\r\n");
      out.write("<link rel=\"apple-touch-icon\" sizes=\"57x57\"\r\n");
      out.write("	href=\"favicons/apple-touch-icon-57x57.png\">\r\n");
      out.write("<link rel=\"apple-touch-icon\" sizes=\"60x60\"\r\n");
      out.write("	href=\"favicons/apple-touch-icon-60x60.png\">\r\n");
      out.write("<link rel=\"apple-touch-icon\" sizes=\"72x72\"\r\n");
      out.write("	href=\"favicons/apple-touch-icon-72x72.png\">\r\n");
      out.write("<link rel=\"apple-touch-icon\" sizes=\"76x76\"\r\n");
      out.write("	href=\"favicons/apple-touch-icon-76x76.png\">\r\n");
      out.write("<link rel=\"icon\" type=\"image/png\" sizes=\"96x96\"\r\n");
      out.write("	href=\"favicons/apple-touch-icon-96x96.png\">\r\n");
      out.write("<link rel=\"apple-touch-icon\" sizes=\"114x114\"\r\n");
      out.write("	href=\"favicons/apple-touch-icon-114x114.png\">\r\n");
      out.write("<link rel=\"apple-touch-icon\" sizes=\"120x120\"\r\n");
      out.write("	href=\"favicons/apple-touch-icon-120x120.png\">\r\n");
      out.write("<link rel=\"apple-touch-icon\" sizes=\"144x144\"\r\n");
      out.write("	href=\"favicons/apple-touch-icon-144x144.png\">\r\n");
      out.write("<link rel=\"apple-touch-icon\" sizes=\"152x152\"\r\n");
      out.write("	href=\"favicons/apple-touch-icon-152x152.png\">\r\n");
      out.write("<link rel=\"apple-touch-icon\" sizes=\"180x180\"\r\n");
      out.write("	href=\"favicons/apple-touch-icon-180x180.png\">\r\n");
      out.write("<link rel=\"icon\" type=\"image/png\" sizes=\"192x192\"\r\n");
      out.write("	href=\"/favicons/android-icon-192x192.png\">\r\n");
      out.write("<link rel=\"shortcut icon\" type=\"image/x-icon\"\r\n");
      out.write("	href=\"/images/asset/vku-icon.png\" />\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css\"\r\n");
      out.write("	integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\r\n");
      out.write("	crossorigin=\"anonymous\">\r\n");
      out.write("<link rel=stylesheet href=\"css/aos.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/bootstrap.min.css\">\r\n");
      out.write("<style>\r\n");
      out.write("form {\r\n");
      out.write("	justify-content: center !important;\r\n");
      out.write("	align-items: center !important;\r\n");
      out.write("	text-align: center !important;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<meta name=\"msapplication-TileColor\" content=\"#ffffff\">\r\n");
      out.write("<meta name=\"theme-color\" content=\"#ffffff\">\r\n");
      out.write("</head>\r\n");
      out.write("<body\r\n");
      out.write("	style=\"background-image: url('https://cdn5.f-cdn.com/contestentries/1578585/21468461/5d62b49ac544b_thumb900.jpg'); background-size: 100%; background-repeat: no-repeat; height: 100vh;\">\r\n");
      out.write("	<div class=\"center\">\r\n");
      out.write("		<form action=\"./register\" method=\"post\">\r\n");
      out.write("			<h1 style=\"font-family: 'Permanent Marker', cursive;\">ĐĂNG KÝ\r\n");
      out.write("				TÀI KHOẢN</h1>\r\n");
      out.write("			<p class=\"text-danger\" id=\"danger\" style=\"text-align: center\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${msg}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\r\n");
      out.write("			<input type=\"text\" name=\"username\" id=\"username\"\r\n");
      out.write("				placeholder=\"Username\" required=\"required\"><br> <br>\r\n");
      out.write("			<input type=\"password\" name=\"password\" class=\"Password\"\r\n");
      out.write("				placeholder=\"Password\" id=\"password\" required=\"required\"><br>\r\n");
      out.write("			<br> <span class=\"passwordText\"></span> <input type=\"password\"\r\n");
      out.write("				name=\"password\" class=\"cfPassword\" placeholder=\"Confirm password\"\r\n");
      out.write("				required=\"required\" id=\"cfpassword\"><br> <br> <span\r\n");
      out.write("				class=\"cfpasswordText\"></span> <input id=\"button\" type=\"submit\"\r\n");
      out.write("				value=\"Register\"\r\n");
      out.write("				style=\"background-color: rgb(255, 0, 68); color: #ffff; border: none; border-radius: 5px; font-size: 20px; cursor: pointer;\" />\r\n");
      out.write("			<br> <br> <a href=\"login.jsp\">Or login</a>\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("	<script>\r\n");
      out.write("const username = document.getElementById(\"username\");\r\n");
      out.write("const password = document.getElementById(\"password\");\r\n");
      out.write("const cfpassword = document.getElementById(\"cfpassword\");\r\n");
      out.write("if (username.value.length==0 || password.value.length==0 || cfpassword.value.length==0) {\r\n");
      out.write("	document.getElementById(\"button\").disabled = true;\r\n");
      out.write("}else{\r\n");
      out.write("	document.getElementById(\"button\").disabled = false;\r\n");
      out.write("}\r\n");
      out.write("	const passwordBox = document.querySelector('.Password');\r\n");
      out.write("	const passwordText = document.querySelector('.passwordText');\r\n");
      out.write("	var passwordPatterm = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$/;\r\n");
      out.write("	\r\n");
      out.write("	password.addEventListener('input', () => {\r\n");
      out.write("	    if (!password.value.match(passwordPatterm) && (password.value).length>0) {\r\n");
      out.write("	        passwordBox.classList.add('invalid');\r\n");
      out.write("	        passwordBox.classList.remove('valid');\r\n");
      out.write("	        passwordText.innerHTML = \"<i><b>Mật khẩu không hợp lệ</b></i>\";\r\n");
      out.write("	        passwordText.style.display = 'block';\r\n");
      out.write("	        passwordText.style.margin=\"-10px 0 0 0\";\r\n");
      out.write("	        document.getElementById(\"button\").disabled = true;\r\n");
      out.write("	        passwordText.style.color=\"red\";\r\n");
      out.write("	    } else{\r\n");
      out.write("	  		passwordBox.classList.add('valid');\r\n");
      out.write("	        passwordBox.classList.remove('invalid');\r\n");
      out.write("	        passwordText.style.display = 'none';\r\n");
      out.write("	        document.getElementById(\"button\").disabled = false;\r\n");
      out.write("	    }\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	const cfpasswordBox = document.querySelector('.cfPassword');\r\n");
      out.write("	const cfpasswordText = document.querySelector('.cfpasswordText');\r\n");
      out.write("\r\n");
      out.write("	cfpassword.addEventListener('input', () => {\r\n");
      out.write("			if (cfpassword.value==password.value) {\r\n");
      out.write("	        cfpasswordBox.classList.add('valid');\r\n");
      out.write("	        cfpasswordBox.classList.remove('invalid');\r\n");
      out.write("	        cfpasswordText.style.display = 'none';\r\n");
      out.write("	        document.getElementById(\"button\").disabled = false;\r\n");
      out.write("	    } else {\r\n");
      out.write("			cfpasswordBox.classList.add('invalid');\r\n");
      out.write("	        cfpasswordBox.classList.remove('valid');\r\n");
      out.write("	        cfpasswordText.innerHTML = \"<b><i>Mật khẩu không khớp</b></i>\";\r\n");
      out.write("	        cfpasswordText.style.display = 'block';\r\n");
      out.write("	        cfpasswordText.style.margin=\"-10px 0 0 0\";\r\n");
      out.write("	        document.getElementById(\"button\").disabled = true;\r\n");
      out.write("	        cfpasswordText.style.color=\"red\";\r\n");
      out.write("	    }\r\n");
      out.write("\r\n");
      out.write("	    \r\n");
      out.write("	});\r\n");
      out.write("</script>\r\n");
      out.write("	<script\r\n");
      out.write("		src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script>\r\n");
      out.write("	<script\r\n");
      out.write("		src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\r\n");
      out.write("	<script type=\"text/javascript\" src=\"js/bootstrap.min.js\"></script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
